#!/usr/bin/env perl
## Copyright Â© 2011 by Daniel Friesel <derf@finalrewind.org>
## License: WTFPL:
##   0. You just DO WHAT THE FUCK YOU WANT TO.
use strict;
use warnings;
use 5.010;

use App::Raps2;
use File::BaseDir qw(data_files data_home);
use File::Slurp qw(read_dir);

my $raps2 = App::Raps2->new();
my ( $action, @args ) = @ARGV;

our $VERSION = '0.50';

sub file_must_exist {
	my ( $file, $name ) = @_;

	if ( not defined $file ) {
		say STDERR "No such account: ${name}";
		exit 2;
	}

	return;
}

sub file_must_not_exist {
	my ( $file, $name ) = @_;

	if ( -e $file ) {
		say STDERR "Account already exists: ${name}";
		exit 2;
	}

	return;
}

sub cmd_add {
	my ($name) = @_;

	my $pwfile = data_home('raps2') . "/${name}";

	file_must_not_exist( $pwfile, $name );

	$raps2->get_master_password();

	my $url   = $raps2->ui->read_line('URL');
	my $login = $raps2->ui->read_line('Login');
	my $pass  = $raps2->ui->read_pw( 'Password', 1 );
	my $extra = $raps2->ui->read_multiline('Additional content');

	$raps2->pw_save(
		file     => $pwfile,
		url      => $url,
		login    => $login,
		password => $pass,
		extra    => $extra,
	);

	return;
}

sub cmd_dump {
	my ($name) = @_;

	my $pwfile = data_files("raps2/${name}");

	file_must_exist( $pwfile, $name );

	$raps2->get_master_password();

	my $key = $raps2->pw_load( file => $pwfile );

	$raps2->ui->output(
		[ 'URL',      $key->{url} ],
		[ 'Login',    $key->{login} ],
		[ 'Password', $key->{password} ],
	);
	if ( $key->{extra} ) {
		print $key->{extra};
	}

	return;
}

sub cmd_edit {
	my ($name) = @_;

	my $pwfile = data_files("raps2/${name}");

	file_must_exist( $pwfile, $name );

	$raps2->get_master_password();

	my $key = $raps2->pw_load( file => $pwfile );

	my $salt     = $key->{salt};
	my $url      = $raps2->ui->read_line( 'URL', $key->{url} );
	my $login    = $raps2->ui->read_line( 'Login', $key->{login} );
	my $pass     = $key->{password};
	my $new_pass = $raps2->ui->read_pw( 'New password (empty to keep old)', 1 );
	my $extra    = $key->{extra} // q{};

	if ( length($new_pass) ) {
		$pass = $new_pass;
	}

	$raps2->pw_save(
		file     => $pwfile,
		salt     => $salt,
		url      => $url,
		login    => $login,
		password => $pass,
		extra    => $extra,
	);

	return;
}

sub cmd_get {
	my ($name) = @_;

	my $pwfile = data_files("raps2/${name}");

	file_must_exist( $pwfile, $name );

	$raps2->get_master_password();

	my $key = $raps2->pw_load( file => $pwfile );

	$raps2->ui->to_clipboard( $key->{password} );

	if ( $key->{extra} ) {
		print $key->{extra};
	}

	return;
}

sub cmd_info {
	my ($name) = @_;

	my $pwfile = data_files("raps2/${name}");

	file_must_exist( $pwfile, $name );

	my $key = $raps2->pw_load_info( file => $pwfile );
	$raps2->ui->output( [ 'URL', $key->{url} ], [ 'Login', $key->{login} ], );

	return;
}

sub cmd_list {
	my @files = read_dir( data_home('raps2') );

	for my $file ( sort @files ) {
		my $key = $raps2->pw_load_info( name => $file );
		$raps2->ui->list(
			[ 'Account', $file ],
			[ 'Login',   $key->{login} ],
			[ 'URL',     $key->{url} ],
		);
	}

	return;
}

sub cmd_remove {
	my ($name) = @_;

	my $pwfile = data_files("raps2/${name}");

	file_must_exist( $pwfile, $name );

	unlink($pwfile)
	  or die("Could not unlink ${pwfile}: ${!}\n");

	return;
}

given ($action) {
	when ('add')     { cmd_add(@args) }
	when ('del')     { cmd_remove(@args) }
	when ('dump')    { cmd_dump(@args) }
	when ('edit')    { cmd_edit(@args) }
	when ('get')     { cmd_get(@args) }
	when ('info')    { cmd_info(@args) }
	when ('list')    { cmd_list(@args) }
	when ('version') { say "raps2 version ${VERSION}" }
	default          { die "Unknown action: ${action}\n" }
}

__END__

=head1 NAME

raps2 - "Right, Another Password Store" take two

=head1 SYNOPSIS

B<raps2> I<action> I<args ...>

=head1 VERSION

This manual documents B<raps2> version 0.50

=head1 DESCRIPTION

raps2 is a simple password safe.  You give it a name, a password and optional
metadata, and it will encrypt and store them for you.  You probably want to
start with C<< raps2 add accountname >>, and then later use C<< raps2 get
accountname >> and paste the corresponding password into whatever application
requires it.  B<raps2> will automatically initialize its store when used for
the first time.

Supported metadata are "URL", "Login" and the multiline "Extra" field.  URL
and Login will be saved as plaintext, Extra is encrypted like the password.

=head1 ACTIONS

=over

=item B<add> I<account>

Adds I<account> to the store.  It will ask you for the store's master
password, some metadata and the new password and then store them.

=item B<del> I<account>

Remove I<account> from the store.

=item B<dump> I<account>

Dump everything saved for I<account>, including the clear-text password, to
stdout.

=item B<edit> I<account>

Edit saved data for I<account>.  Note that editing the multiline "extra" field
is not yet possible.

=item B<get> I<account>

Decrypt I<account>'s password and store it in the primary X Clipboard.  Note
that it can only be pasted once.  Prints the content of the multiline B<extra>
field (if present) to stdout.

=item B<info> I<account>

Show information about I<account>, does not require the master password.

=item B<list>

List all saved accounts with their respective Logins and URLs

=item B<version>

Show version information

=back

=head1 OPTIONS

None.

=head1 EXIT STATUS

zero on success, non-zero otherwise.

=head1 CONFIGURATION

raps2 saves the master password hash in F<~/.config/raps2/password>.

Additional encrypted passwords are stored in F<~/.local/share/raps2/>.

These directories can be changed by setting the B<XDG_CONFIG_HOME> and
B<XDG_DATA_HOME> environment variables.

=head1 DEPENDENCIES

=over

=item * Crypt::CBC

=item * Crypt::Eksblowfish

=item * File::BaseDir

=item * File::Path (usually included with perl core)

=item * File::Slurp

=item * xclip (for C<< raps2 get >>)

=back

=head1 BUGS AND LIMITATIONS

This is alpha software, the store format may change without further notice.
Backwards-compatibility is not guaranteed.

=head1 AUTHOR

Copyright (C) 2011 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
